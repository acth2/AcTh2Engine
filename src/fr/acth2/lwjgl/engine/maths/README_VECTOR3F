Constructeur
Vector3f(x,y,z)Vector3f(x,y,z)

Crée un vecteur v=(x,y,z)v=(x,y,z).
Fonctions de modification
set(x, y, z)

v=(x,y,z)v=(x,y,z)
setX(x)

vx=xvx​=x
setY(y)

vy=yvy​=y
setZ(z)

vz=zvz​=z
Opérations vectorielles
add(Vector3f vector1, Vector3f vector2)

vresult=(v1x+v2x,v1y+v2y,v1z+v2z)vresult​=(v1x​+v2x​,v1y​+v2y​,v1z​+v2z​)
add(Vector3f other)

v=(vx+ox,vy+oy,vz+oz)v=(vx​+ox​,vy​+oy​,vz​+oz​)
subtract(Vector3f vector1, Vector3f vector2)

vresult=(v1x−v2x,v1y−v2y,v1z−v2z)vresult​=(v1x​−v2x​,v1y​−v2y​,v1z​−v2z​)
multiply(Vector3f vector1, Vector3f vector2)

vresult=(v1x⋅v2x,v1y⋅v2y,v1z⋅v2z)vresult​=(v1x​⋅v2x​,v1y​⋅v2y​,v1z​⋅v2z​)
multiply(Vector3f vector, float scalar)

vresult=(vx⋅s,vy⋅s,vz⋅s)vresult​=(vx​⋅s,vy​⋅s,vz​⋅s)
multiply(float scalar)

v=(vx⋅s,vy⋅s,vz⋅s)v=(vx​⋅s,vy​⋅s,vz​⋅s)
scale(float scalar)

Equivalent à multiply(float scalar) : v=(vx⋅s,vy⋅s,vz⋅s)v=(vx​⋅s,vy​⋅s,vz​⋅s)
div(Vector3f vector1, Vector3f vector2)

vresult=(v1xv2x,v1yv2y,v1zv2z)vresult​=(v2x​v1x​​,v2y​v1y​​,v2z​v1z​​)
Longueur et normalisation
length(Vector3f vector)

∥v∥=vx2+vy2+vz2∥v∥=vx2​+vy2​+vz2​

​
length()

∥v∥=vx2+vy2+vz2∥v∥=vx2​+vy2​+vz2​

​
normalize(Vector3f vector)

vnormalized=v∥v∥=(vx∥v∥,vy∥v∥,vz∥v∥)vnormalized​=∥v∥v​=(∥v∥vx​​,∥v∥vy​​,∥v∥vz​​)
normalize()

Idem que normalize(Vector3f vector) pour le vecteur actuel.
normalize(boolean diff1)

Si ∥v∥≠0∥v∥=0 :
vnormalized=v∥v∥vnormalized​=∥v∥v​
Sinon :
vnormalized=(0,0,0)vnormalized​=(0,0,0)
Produit scalaire
dot(Vector3f vector1, Vector3f vector2)

v1⋅v2=v1x⋅v2x+v1y⋅v2y+v1z⋅v2zv1​⋅v2​=v1x​⋅v2x​+v1y​⋅v2y​+v1z​⋅v2z​
Rotation
rotateY(Vector3f vector, float angle)

Apreˋs rotation autour de Y:Apreˋs rotation autour de Y:
vx′=cos⁡(angle)⋅vx−sin⁡(angle)⋅vzvy′=vyvz′=sin⁡(angle)⋅vx+cos⁡(angle)⋅vz
vx′​vy′​vz′​​=cos(angle)⋅vx​−sin(angle)⋅vz​=vy​=sin(angle)⋅vx​+cos(angle)⋅vz​​
Direction "forward"
getForward()

vforward=(−sin⁡(y),0,cos⁡(y))vforward​=(−sin(y),0,cos(y))
yy est en radians.
